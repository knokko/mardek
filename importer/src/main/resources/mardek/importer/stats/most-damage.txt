function CastSpell2b(dontEndTurn, t, pfx)
{
   var _loc2_ = TECH_USING;
   Target = t;
   if(ALL_REACTION == 2)
   {
      REACTION_USING = Target.stats.REACT[REACTION_TYPE];
      trace("REACTION_USING = " + REACTION_USING);
   }
   if(Target.stats.name == "Legion")
   {
      if(GetSkillInfo("Robo",_loc2_.skill) != null)
      {
         if(Target.stats.learned[_loc2_.skill] == null)
         {
            Target.stats.learned[_loc2_.skill] = 1;
            MasteredSkill(TECHbar);
            DamageNumber(Target._x,Target._y - 50,"LEARNED!",15715456,"");
         }
      }
   }
   CS_MISSED = false;
   if(!_loc2_.buff && !_loc2_.cannot_miss && (_loc2_.accuracy != null && Math.random() * 100 > _loc2_.accuracy + int(REACTION_USING.accuracy) || Math.random() * 100 <= int(REACTION_USING.evade) && !TECH_USING.BREATH || Target.mdlStats.evasion && Math.random() * 100 <= Target.mdlStats.evasion && _loc2_.MODE == "P"))
   {
      _root.DamageNumber(Target._x,Target._y,"<p align=\'center\'>Miss</p>",null);
      _root.playSFX("Miss");
      if(_loc2_.MODE == "P")
      {
         CS_MISSED = true;
      }
      return undefined;
   }
   if(endturn)
   {
      return undefined;
   }
   if(!GIVEN_XP && Acting.SIDE != "e")
   {
      GiveEXP(50,Acting,Target);
   }
   GIVEN_XP = true;
   var _loc11_ = GetUsingElement();
   if(!_loc2_.buff && !_loc2_.special.HEALING && HasSTFX(Target.stats,ELEM_char[_loc11_] + "N1"))
   {
      RemoveSTFX(Target.stats,ELEM_char[_loc11_] + "N1");
      _root.DamageNumber(Target._x,Target._y,"<p align=\'center\'>Null</p>",null);
   }
   else
   {
      if(_loc2_.special.REVIVE)
      {
         if(Target.mdlStats.TYPE == "UNDEAD" || HasSTFX(ts,"ZOM"))
         {
            _root.InflictDamage(int(Target.stats.hp[0] * _loc2_.special.REVIVE),false);
         }
         else if(Target.stats.hp[0] == 0)
         {
            Target.stats.hp[0] = 1;
            Target.mdl.dead = false;
            Target.dying = false;
            _root.InflictDamage(- int(Target.stats.hp[1] * _loc2_.special.REVIVE),false,null,false,null,null,true);
            Target.Animate("idle");
         }
         else if(_loc2_.skill != "Repair")
         {
            _root.DamageNumber(Target._x,Target._y,"<p align=\'center\'>Miss</p>",null);
         }
      }
      if(_loc2_.special.KILL)
      {
         if(Math.random() <= _loc2_.special.KILL)
         {
            Target.stats.hp[0] = 0;
            Target.dying = true;
            Target.onDie();
            GDelay = 70;
         }
         else
         {
            _root.DamageNumber(Target._x,Target._y,"<p align=\'center\'>Miss</p>",null);
         }
      }
      if(_loc2_.elementalShift != null)
      {
         Target.mdlStats.resist = Target.ShiftResistances[Target.stats.element = _loc2_.elem];
         calculateStats(Target.stats);
      }
      if(_loc2_.DMG != null)
      {
         var _loc3_ = undefined;
         if(_loc2_.DMG[0] == "SPECIAL")
         {
            switch(_loc2_.DMG[1])
            {
               case "resistpercent":
                  _loc3_ = int(Target.stats.RESIST[_loc2_.DMG[2]] / 100 * Target.stats.hp[1]);
                  break;
               case "money":
                  _loc3_ = Math.floor(GameData.money / 500);
                  break;
               case "hplost":
                  _loc3_ = Acting.stats.hp[1] - Acting.stats.hp[0];
                  break;
               case "fullcure":
                  _loc3_ = - Target.stats.hp[1];
                  InflictDamage(- Target.stats.mp[1],null,null,true,null,{x:8,y:18});
                  break;
               case "set_dmg":
                  _loc3_ = _loc2_.DMG[2];
                  break;
               case "num_kills":
                  _loc3_ = int(Acting.stats.KILLS * Acting.stats.level / 16);
                  break;
               case "HP%":
                  if(Target.stats.hp[0] > 9999)
                  {
                     _loc3_ = 0;
                  }
                  else
                  {
                     _loc3_ = int(Target.stats.hp[0] * _loc2_.DMG[2]);
                  }
                  if(_loc3_ > 9999)
                  {
                     _loc3_ = 9999;
                  }
                  break;
               case "starburst": // UNUSED
                  _loc3_ = MdmgFormula(Acting,Target,_loc2_.DMG[Acting._name.substr(0,1) != Target._name.substr(0,1) ? 2 : 3],_loc2_.elem);
                  break;
               case "SPR_CALC":
                  _loc3_ = int(Acting.stats.level * Acting.stats.getStat("SPR") * _loc2_.DMG[2]);
                  break;
               case "SPR_AS_DMG":
                  _loc3_ = _root[(_loc2_.MODE != "M" ? "" : "M") + "dmgFormula"](Acting,Target,GetTechBaseDMG(Acting.stats.getStat("SPR") * _loc2_.DMG[2],Acting) * (!_loc2_.special.HEALING ? 1 : -1),_loc2_.elem);
                  break;
               case "gem": // UNUSED
            }
         }
         else if(phySpell && !_loc2_.USES_SPR)
         {
            _loc3_ = dmgFormula(Acting,Target,GetTechBaseDMG(_loc2_.DMG,Acting),_loc2_.elem);
         }
         else
         {
            _loc3_ = MdmgFormula(Acting,Target,GetTechBaseDMG(_loc2_.DMG,Acting) * (!_loc2_.special.HEALING ? 1 : -1),_loc2_.elem);
         }
         if(_loc2_.typeBonus != null && _loc2_.typeBonus[0] == Target.stats.monStats.TYPE)
         {
            if(_loc2_.typeBonus[1][0] == "m")
            {
               _loc3_ *= _loc2_.typeBonus[1][1];
            }
            else if(_loc2_.typeBonus[1][0] == "p")
            {
               _loc3_ += _loc2_.typeBonus[1][1];
            }
         }
         if(_loc2_.elemBonus != null)
         {
            var _loc5_ = 0;
            while(_loc5_ < _loc2_.elemBonus.length)
            {
               if(_loc2_.elemBonus[_loc5_][0] == Target.stats.monStats.cElem)
               {
                  if(_loc2_.elemBonus[_loc5_][1][0] == "m")
                  {
                     _loc3_ *= _loc2_.elemBonus[_loc5_][1][1];
                  }
                  else if(_loc2_.elemBonus[_loc5_][1][0] == "p")
                  {
                     _loc3_ += _loc2_.elemBonus[_loc5_][1][1];
                  }
               }
               _loc5_ = _loc5_ + 1;
            }
         }
         if(_loc2_.stfxBonus != null)
         {
            for(_loc5_ in stfxBonus)
            {
               if(HasSTFX(Target.stats,_loc5_))
               {
                  _loc3_ *= _loc2_.stfxBonus[_loc5_];
               }
            }
         }
         _loc3_ = FinalDamage(_loc3_);
         var _loc8_ = Target.stats.hp[0];
         InflictDamage(_loc3_,null,null,_loc2_.affectMP);
         if(_loc2_.special.DRAIN)
         {
            var _loc13_ = Target;
            Target = Acting;
            DRAINING = true;
            InflictDamage(- _loc3_,null,null,_loc2_.affectMP);
            DRAINING = false;
            Target = _loc13_;
         }
         if(REACTION_USING.drainHP && !_loc2_.special.HEALING)
         {
            DRAINING = true;
            var _loc12_ = Target;
            Target = Acting;
            var _loc10_ = int(_loc3_ * REACTION_USING.drainHP);
            InflictDamage(- (_loc10_ <= _loc8_ ? _loc10_ : _loc8_));
            Target = _loc12_;
            DRAINING = false;
         }
      }
      if(_loc2_.special.REPAIR)
      {
         InflictDamage(Target.stats.name != "Legion" ? 0 : - Target.stats.hp[1],false,null,false,null,null,true);
      }
      if(_loc2_.special.DISPEL)
      {
         for(s in GoodSTATUSES_)
         {
            _root.RemoveSTFX(Target.stats,s);
         }
      }
      for(s in _loc2_.stfx)
      {
         if(_loc2_.stfx[s] > 0)
         {
            if(_loc2_.special.HEALING)
            {
               if(GoodSTATUSES_[s])
               {
                  _root.AddSTFX(Target.stats,s);
               }
               else
               {
                  _root.RemoveSTFX(Target.stats,s);
               }
            }
            else if(Math.random() * 100 < _loc2_.stfx[s])
            {
               if(Math.random() * 100 > int(Target.stats.RESIST[s]) + int(REACTION_USING.RESIST[s]))
               {
                  _root.AddSTFX(Target.stats,s);
               }
            }
         }
      }
      DoStatMod(_loc2_);
      if(_loc2_.remove_stfx != null)
      {
         for(s in _loc2_.remove_stfx)
         {
            if(Math.random() * 100 <= _loc2_.remove_stfx[s])
            {
               RemoveSTFX(Target.stats,s);
            }
         }
      }
      if(_loc2_.SUMMON)
      {
         var _loc4_ = Target._name.substr(1);
         var _loc7_ = random(_loc2_.SUMMON[0].length);
         var _loc6_ = _loc2_.SUMMON[0][_loc7_];
         Target.stats = PCstatsE[_loc4_ - 1] = {name:(_loc2_.SUMMON[2][_loc7_] == null ? _loc6_ : _loc2_.SUMMON[2][_loc7_]),model:_loc6_,B_LVL:_loc2_.SUMMON[1],hp:[10,10]};
         calculateStats(Target.stats);
         var _loc9_ = FOE_POS;
         Target._x = _loc9_[_loc4_ - 1][0] + 38;
         Target._y = _loc9_[_loc4_ - 1][1] + 48 + 30;
         Target.dying = false;
         Target.mdl.dead = false;
         Target._visible = true;
         Target._alpha = Target.mdl._alpha = 100;
         Target.DOING_SUMMAT = 3;
         Target.attempted_switch = true;
         Target.gotoAndStop(_loc6_);
         Target.gotoAndStop(2);
         Target.gotoAndStop(1);
         _root["BE" + _loc4_]._alpha = 100;
         _root["BE" + _loc4_]._visible = true;
      }
      if(!_loc2_.special.HEALING && !_loc2_.buff)
      {
         for(var s in REACTION_USING.stfx_inflict)
         {
            if(Math.random() <= REACTION_USING.stfx_inflict[s] && Math.random() * 100 >= int(Target.stats.RESIST[s]))
            {
               _root.AddSTFX(Target.stats,s);
            }
         }
      }
      if(REACTION_USING.absorbMP && int(TECH_USING.MP) && Acting != Target)
      {
         DelayCommand(AbsorbMP,16,- int(TECH_USING.MP),Target);
      }
   }
   calculateStats(Target.stats);
   calculateStats(Acting.stats);
   spelement = "" + _loc2_.elem;
   SPELLCOLOUR = HexToRGB(_loc2_.pfx[1]);
   Flash(Target.mdl,ElemRGB(_loc2_.elem));
   if(PFXList["pfx_" + _loc2_.pfx].delayedSfx)
   {
      playSFX(PFXList["pfx_" + _loc2_.pfx].delayedSfx);
   }
   if(_loc2_.BREATH && CASTING_ON_ALL || _loc2_.ALL_PFX)
   {
      return undefined;
   }
   if(!PFXList["pfx_" + _loc2_.pfx].dmgdelay)
   {
      BattleParticleEffect(_loc2_.pfx,Target,_loc2_.sfx,_loc2_);
   }
   return undefined;
}

function FinalDamage(dmg)
{
   var _loc7_ = Acting.stats;
   var _loc3_ = Target.stats;
   var _loc5_ = GetItemInfo(_loc7_.weapon);
   var _loc4_ = TECH_USING.MODE != "M" ? "P" : "M";
   var _loc6_ = GetUsingElement();
   trace("Element: " + _loc6_);
   if(TECH_USING.MODE == "P" || TECH_USING == null)
   {
      if(_loc5_.typeBonus[_loc3_.monStats.TYPE])
      {
         dmg *= _loc5_.typeBonus[_loc3_.monStats.TYPE];
      }
      if(_loc5_.elemBonus[_loc3_.monStats.cElem])
      {
         dmg *= _loc5_.elemBonus[_loc3_.monStats.cElem];
      }
   }
   if(TECH_USING.special.COUP_DE_GRACE)
   {
      if(!_loc3_.status.length)
      {
         dmg /= 2;
      }
      else
      {
         dmg *= 1 + 0.5 * int(_loc3_.status.length);
      }
   }
   if(REACTION_USING)
   {
      dmg = BonusModifier(REACTION_USING,dmg,_loc7_);
   }
   dmg *= 1 + (int(Acting.stats.EMPOWER[element]) + int(REACTION_USING.EMPOWER[element])) / 100;
   if(!TECH_USING.special.HEALING)
   {
      dmg *= ElemModifier(Target,_loc6_,dmg);
   }
   if(tALL && !TECH_USING.no_dmg_split)
   {
      if(_num_targets > 1)
      {
         dmg /= 2;
      }
   }
   if(_root.HasSTFX(_loc3_,_loc4_ + "SH") && !TECH_USING.ignore_shield)
   {
      dmg *= 0.5;
      BattleParticleEffect((_loc4_ != "M" ? "" : "m") + "shield",Target);
   }
   if(target.DEFENDING)
   {
      dmg *= 0.7;
   }
   if(TECH_USING.special.HEALING && (Target.mdlStats.TYPE == "UNDEAD" || HasSTFX(_loc3_,"ZOM")) && !TECH_USING.special.HEALUNDEAD)
   {
      dmg = Math.abs(dmg);
   }
   if(SONG_PLAYING)
   {
      if(Acting.SIDE == "p" && SONG_PLAYING.Song.DmgMult[_loc4_] != null)
      {
         dmg *= 1 + SONG_PLAYING.Song.DmgMult[_loc4_] * SONG_ELWYEN.stats.getStat("SPR");
      }
      else if(Acting.SIDE == "e" && SONG_PLAYING.Song.DmgResist[_loc4_] != null)
      {
         dmg *= 1 - SONG_PLAYING.Song.DmgResist[_loc4_] * SONG_ELWYEN.stats.getStat("SPR");
      }
   }
   trace("Final Damage: " + dmg);
   if(dmg < -9999)
   {
      dmg = -9999;
   }
   else if(dmg > 9999)
   {
      dmg = 9999;
   }
   return int(dmg);
}L