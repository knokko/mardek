import org.gradle.internal.os.OperatingSystem
import proguard.gradle.ProGuardTask

buildscript {
	repositories {
		mavenCentral()
	}

	dependencies {
		classpath 'com.guardsquare:proguard-gradle:7.5.0'
	}
}

plugins {
	id "java"
	id "org.jetbrains.kotlin.jvm" version "2.0.0"
	id "com.github.johnrengelman.shadow" version "8.1.1"
}

allprojects {
	apply plugin: "java"
	apply plugin: "org.jetbrains.kotlin.jvm"

	java {
		withSourcesJar()
	}

	repositories {
		mavenCentral()
		maven { url 'https://jitpack.io' }
	}
	
	project.ext.jomlVersion = "1.10.1"
	project.ext.lwjglVersion = "3.3.4"
	project.ext.boilerVersion = "v4.3.0"
	project.ext.textRenderVersion = "v0.1.0"
	project.ext.compressorVersion = "v0.2.2"
	project.ext.bitserVersion = "0a1f2b6904"
	switch (OperatingSystem.current()) {
		case OperatingSystem.LINUX:
			project.ext.lwjglNatives = [
					"natives-linux", "natives-linux-arm32", "natives-linux-arm64",
					"natives-linux-ppc64le", "natives-linux-riscv64"
			]
			break
		case OperatingSystem.WINDOWS:
			project.ext.lwjglNatives = ["natives-windows", "natives-windows-x86", "natives-windows-arm64"]
			break
		case OperatingSystem.MAC_OS:
			project.ext.lwjglNatives = ["natives-macos", "natives-macos-arm64"]
			break
		case OperatingSystem.FREE_BSD:
			project.ext.lwjglNatives = ["natives-freebsd"]
			break
	}

	dependencies {
		implementation platform("org.lwjgl:lwjgl-bom:$lwjglVersion")
		testImplementation platform("org.junit:junit-bom:5.10.3")
		testImplementation "org.junit.jupiter:junit-jupiter:5.10.3"
		testRuntimeOnly "org.junit.platform:junit-platform-launcher"
	}

	project.ext.vulkanImplementationDependencies = [
			"com.github.knokko:vk-boiler:$boilerVersion",
			"com.github.knokko:vk-compressor:$compressorVersion",
			"com.github.knokko.text-renderer:core-bundle:$textRenderVersion",
			"com.github.knokko.text-renderer:unicode-fonts:$textRenderVersion",
			"com.github.knokko.text-renderer:vulkan:$textRenderVersion",
			"org.joml:joml:$jomlVersion",
			"org.lwjgl:lwjgl",
			"org.lwjgl:lwjgl-vma",
			"org.lwjgl:lwjgl-vulkan",
	]
	project.ext.vulkanRuntimeDependencies = project.ext.lwjglNatives.collectMany {
		// TODO Figure out why I need to include freetype; this should be bundled by text-renderer!
		def result = ["org.lwjgl:lwjgl::$it", "org.lwjgl:lwjgl-vma::$it", "org.lwjgl:lwjgl-freetype::$it"]
		if (it.startsWith("natives-macos")) result.add("org.lwjgl:lwjgl-vulkan::$it")
		result
	}

	test {
		useJUnitPlatform()
	}
}

project(":assets") {
	dependencies {
		api "com.github.knokko:bitser:$bitserVersion"
		implementation "com.github.knokko:vk-compressor:$compressorVersion"
	}
}

project(":game") {
	apply plugin: "com.github.johnrengelman.shadow"
	dependencies {
		implementation "com.github.knokko.update-loop:implementation:v2.0.0"
		implementation "com.github.knokko:sample-profiler:v1.0.0"
		for (dependency in project.ext.vulkanImplementationDependencies) implementation "$dependency"
		implementation "org.lwjgl:lwjgl-glfw"
		implementation project(":assets")
		implementation project(":input")
		implementation project(":renderer")
		implementation project(":state")
		for (natives in project.ext.lwjglNatives) runtimeOnly "org.lwjgl:lwjgl-glfw::$natives"
	}
	shadowJar {
		manifest {
			attributes ("Main-Class": "mardek.game.MardekGameKt")
		}
	}
	tasks.register("proguard", ProGuardTask) {
		dependsOn "shadowJar"
		injars "build/libs/game-all.jar"
		outjars "build/libs/mardek.jar"

		// I need java.base, and LWJGL needs jdk.unsupported (Unsafe)
		libraryjars "${System.getProperty("java.home")}/jmods/java.base.jmod"
		libraryjars "${System.getProperty("java.home")}/jmods/jdk.unsupported.jmod"

		// I just want to remove unused LWJGL classes and Kotlin std classes;
		// I do NOT want to obfuscate the game, since that will ruin stacktraces
		dontobfuscate()
		dontoptimize()

		// LWJGL system is magical, and will segfault if we remove its stuff
		keep "class org.lwjgl.system.** {*;}"

		// Due to some bitser reflection magic, proguard could remove important stuff
		keep "class mardek.** {*;}"
		keep "class com.github.knokko.bitser.** {*;}"

		// These suggestive annotations are not interesting
		dontwarn "javax.annotation.**"

		// This game doesn't use OpenXR (virtual reality)
		dontwarn "com.github.knokko.boiler**.xr**"
		dontwarn "com.github.knokko.boiler.exceptions.OpenXrFailureException"

		// These classes use java.awt.BufferedImage, which won't be present in the final game jar.
		// However, these classes won't be used in-game, so it doesn't matter.
		dontwarn "com.github.knokko.text.renderer.cpu.BufferedImageTextRenderer"
		dontwarn "mardek.assets.area.ParsedTile"
		dontwarn "mardek.assets.area.ParsedTilesheet"

		// Some methods of BoilerBuffers use java.awt.BufferedImage, but it's fine since I don't call them
		dontwarn "com.github.knokko.boiler.buffers.BoilerBuffers"
	}
}

project(":importer") {
	dependencies {
		for (dependency in project.ext.vulkanImplementationDependencies) implementation "$dependency"
		for (dependency in project.ext.vulkanRuntimeDependencies) runtimeOnly "$dependency"
		implementation files("../flash/ffdec_lib.jar")
		implementation project(":assets")
	}
}

project(":playground") {
	apply plugin: "com.github.johnrengelman.shadow"
	dependencies {
		implementation files("../flash/ffdec_lib.jar")
		implementation "org.lwjgl:lwjgl-glfw"
		implementation project(":assets")
		implementation project(":importer")
		implementation project(":renderer")
		implementation project(":state")

		for (dependency in project.ext.vulkanImplementationDependencies) implementation "$dependency"
		for (dependency in project.ext.vulkanRuntimeDependencies) runtimeOnly "$dependency"

		for (natives in project.ext.lwjglNatives) runtimeOnly "org.lwjgl:lwjgl-glfw::$natives"
	}
	shadowJar {
		manifest {
			attributes ("Main-Class": "mardek.playground.TilesPlaygroundKt")
		}
	}
}

project(":renderer") {
	dependencies {
		for (dependency in project.ext.vulkanImplementationDependencies) implementation "$dependency"
		for (dependency in project.ext.vulkanRuntimeDependencies) runtimeOnly "$dependency"
		implementation project(":assets")
		implementation project(":state")
		implementation project(":ui-renderer")
	}
}

project(":state") {
	dependencies {
		implementation project(":assets")
		implementation project(":input")
	}
}

project(":ui-renderer") {
	dependencies {
		for (dependency in project.ext.vulkanImplementationDependencies) implementation "$dependency"
		for (dependency in project.ext.vulkanRuntimeDependencies) runtimeOnly "$dependency"
	}
}
