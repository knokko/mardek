import org.gradle.internal.os.OperatingSystem

plugins {
	id "java"
	id "org.jetbrains.kotlin.jvm" version "2.0.0"
	id "com.github.johnrengelman.shadow" version "8.1.1"
}

allprojects {
	apply plugin: "java"
	apply plugin: "org.jetbrains.kotlin.jvm"

	java {
		withSourcesJar()
	}

	repositories {
		mavenCentral()
		maven { url 'https://jitpack.io' }
	}
	
	project.ext.jomlVersion = "1.10.1"
	project.ext.lwjglVersion = "3.3.4"
	project.ext.boilerVersion = "v4.2.0"
	project.ext.textRenderVersion = "v0.1.0"
	project.ext.compressorVersion = "v0.2.1"
	switch (OperatingSystem.current()) {
		case OperatingSystem.LINUX:
			project.ext.lwjglNatives = ["natives-linux", "natives-linux-arm32", "natives-linux-arm64"]
			break
		case OperatingSystem.WINDOWS:
			project.ext.lwjglNatives = ["natives-windows", "natives-windows-x86", "natives-windows-arm64"]
			break
		case OperatingSystem.MAC_OS:
			project.ext.lwjglNatives = ["natives-macos", "natives-macos-arm64"]
			break
	}

	dependencies {
		implementation platform("org.lwjgl:lwjgl-bom:$lwjglVersion")
		testImplementation platform("org.junit:junit-bom:5.10.3")
		testImplementation "org.junit.jupiter:junit-jupiter:5.10.3"
		testRuntimeOnly "org.junit.platform:junit-platform-launcher"
	}

	project.ext.vulkanImplementationDependencies = [
			"com.github.knokko:vk-boiler:$boilerVersion",
			"com.github.knokko:vk-compressor:$compressorVersion",
			"com.github.knokko.text-renderer:core-bundle:$textRenderVersion",
			"com.github.knokko.text-renderer:unicode-fonts:$textRenderVersion",
			"com.github.knokko.text-renderer:vulkan:$textRenderVersion",
			"org.joml:joml:$jomlVersion",
			"org.lwjgl:lwjgl",
			"org.lwjgl:lwjgl-vma",
			"org.lwjgl:lwjgl-vulkan",
	]
	project.ext.vulkanRuntimeDependencies = project.ext.lwjglNatives.collectMany {
		// TODO Figure out why I need to include freetype; this should be bundled by text-renderer!
		def result = ["org.lwjgl:lwjgl::$it", "org.lwjgl:lwjgl-vma::$it", "org.lwjgl:lwjgl-freetype::$it"]
		if (it.startsWith("natives-macos")) result.add("org.lwjgl:lwjgl-vulkan::$it")
		result
	}

	test {
		useJUnitPlatform()
	}
}

project(":game") {
	apply plugin: "com.github.johnrengelman.shadow"
	dependencies {
		implementation "com.github.knokko.update-loop:implementation:v2.0.0"
		implementation "com.github.knokko:sample-profiler:v1.0.0"
		for (dependency in project.ext.vulkanImplementationDependencies) implementation "$dependency"
		implementation "org.lwjgl:lwjgl-glfw"
		implementation project(":assets")
		implementation project(":importer") // TODO Eventually get rid of this dependency
		implementation project(":input")
		implementation project(":renderer")
		implementation project(":state")
		for (natives in project.ext.lwjglNatives) runtimeOnly "org.lwjgl:lwjgl-glfw::$natives"
	}
	shadowJar {
		manifest {
			attributes ("Main-Class": "mardek.game.MardekGameKt")
		}
	}
}

project(":importer") {
	dependencies {
		implementation files("../flash/ffdec_lib.jar")
		implementation project(":assets")
		implementation "com.github.knokko:vk-boiler:$boilerVersion"
		implementation "com.github.knokko:vk-compressor:$compressorVersion"
	}
}

project(":playground") {
	apply plugin: "com.github.johnrengelman.shadow"
	dependencies {
		implementation files("../flash/ffdec_lib.jar")
		implementation "org.lwjgl:lwjgl-glfw"
		implementation project(":assets")
		implementation project(":importer")
		implementation project(":renderer")
		implementation project(":state")

		for (dependency in project.ext.vulkanImplementationDependencies) implementation "$dependency"
		for (dependency in project.ext.vulkanRuntimeDependencies) runtimeOnly "$dependency"

		for (natives in project.ext.lwjglNatives) runtimeOnly "org.lwjgl:lwjgl-glfw::$natives"
	}
	shadowJar {
		manifest {
			attributes ("Main-Class": "mardek.playground.TilesPlaygroundKt")
		}
	}
}

project(":renderer") {
	dependencies {
		for (dependency in project.ext.vulkanImplementationDependencies) implementation "$dependency"
		for (dependency in project.ext.vulkanRuntimeDependencies) runtimeOnly "$dependency"
		implementation project(":assets")
		implementation project(":state")
	}
}

project(":state") {
	dependencies {
		implementation project(":assets")
		implementation project(":input")
	}
}
