name: Testing and building executables

on: [push, pull_request]

permissions:
  contents: read

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ windows-latest, ubuntu-latest ]
    steps:
      - uses: actions/checkout@v4
      - uses: NcStudios/VulkanCI@v1.0
        with:
          sdkVersion: 1.3.283.0
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: 'temurin'
      - name: Setup gradle
        uses: gradle/actions/setup-gradle@v4
      - run: ./gradlew test
      - name: Store test results
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-test-results
          path: "**/build/reports"

  fat-jar:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: 'temurin'
      - name: Setup gradle
        uses: gradle/actions/setup-gradle@v4
      - run: ./gradlew proguard
      - uses: actions/upload-artifact@v4
        with:
          name: fat-jar
          path: ./game/build/libs/mardek.jar

  fat-exe:
    runs-on: ${{ matrix.os.name }}
    needs: fat-jar
    strategy:
      matrix:
        os:
          - name: windows-latest
            extension: ".exe"
            architecture: "windows-x64"
            java: "javaw.exe"
            jvmArgs: ""
          - name: windows-11-arm
            extension: ".exe"
            architecture: "windows-arm64"
            java: "javaw.exe"
            jvmArgs: ""
          - name: ubuntu-latest
            extension: ""
            architecture: "linux-x64"
            java: "java"
            jvmArgs: ""
          - name: ubuntu-24.04-arm
            extension: ""
            architecture: "linux-arm64"
            java: "java"
            jvmArgs: ""
          - name: macos-latest
            extension: ""
            architecture: "macos-arm64"
            java: "java"
            jvmArgs: "-XstartOnFirstThread "
          - name: macos-13
            extension: ""
            architecture: "macos-x64"
            java: "java"
            jvmArgs: "-XstartOnFirstThread "
    steps:
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: 'temurin'
      - uses: actions/download-artifact@v4
        with:
          name: fat-jar
          path: with-all-natives
      - run: mkdir with-correct-natives && unzip -d with-correct-natives with-all-natives/mardek.jar

      - if: matrix.os.architecture != 'windows-x64'
        run: rm -R with-correct-natives/windows/x64
      - if: matrix.os.architecture != 'windows-arm64'
        run: rm -R with-correct-natives/windows/arm64
      - if: matrix.os.architecture != 'windows-x32'
        run: rm -R with-correct-natives/windows/x86

      - if: matrix.os.architecture != 'linux-x64'
        run: rm -R with-correct-natives/linux/x64
      - if: matrix.os.architecture != 'linux-arm64'
        run: rm -R with-correct-natives/linux/arm64
      - if: matrix.os.architecture != 'linux-riscv'
        run: rm -R with-correct-natives/linux/riscv64
      - if: matrix.os.architecture != 'linux-powerpc'
        run: rm -R with-correct-natives/linux/ppc64le
      - if: matrix.os.architecture != 'linux-arm32'
        run: rm -R with-correct-natives/linux/arm32

      - if: matrix.os.architecture != 'macos-x64'
        run: rm -R with-correct-natives/macos/x64
      - if: matrix.os.architecture != 'macos-arm64'
        run: rm -R with-correct-natives/macos/arm64

      - if: matrix.os.architecture != 'freebsd'
        run: rm -R with-correct-natives/freebsd

      - run: jlink --module-path "%JAVA_HOME%/jmods" --add-modules java.base,jdk.unsupported --output ./mardek-dir
      - run: cd with-correct-natives && jar -cfM ../mardek-dir/mardek.jar *
      - run: curl -L -o warp-packer-${{ matrix.os.name }}${{ matrix.os.extension }} https://github.com/knokko/warp/releases/download/v0.4.4/warp-packer-${{ matrix.os.name }}${{ matrix.os.extension }}
      - run: chmod 777 ./warp-packer-${{ matrix.os.name }}${{ matrix.os.extension }}
      - run: ./warp-packer-${{ matrix.os.name }}${{ matrix.os.extension }} --arch ${{ matrix.os.architecture }} --input-dir ./mardek-dir --exec bin/${{ matrix.os.java }} --output mardek${{ matrix.os.extension }} --use-temp-directory --exec-args "${{ matrix.os.jvmArgs }}-jar %APP_DIR%/mardek.jar %ARGS%"
      - run: ./mardek${{ matrix.os.extension }} self-test1
      - uses: actions/upload-artifact@v4
        with:
          name: mardek-${{ matrix.os.architecture }}
          path: mardek${{ matrix.os.extension }}

  self-test:
    runs-on: ${{ matrix.os.name }}
    needs: fat-exe
    strategy:
      matrix:
        os:
          - name: windows-latest
            extension: ".exe"
            architecture: "windows-x64"
          - name: windows-11-arm
            extension: ".exe"
            architecture: "windows-arm64"
          - name: ubuntu-latest
            extension: ""
            architecture: "linux-x64"
          - name: ubuntu-24.04-arm
            extension: ""
            architecture: "linux-arm64"
          - name: macos-latest
            extension: ""
            architecture: "macos-arm64"
          - name: macos-13
            extension: ""
            architecture: "macos-x64"
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: mardek-${{ matrix.os.architecture }}
          path: ./
      - run: chmod 777 ./mardek${{ matrix.os.extension }}
      - run: ./mardek${{ matrix.os.extension }} self-test1
